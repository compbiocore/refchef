
.. parseyaml index file, created by `ablog start` on Thu May 17 10:44:53 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Brown CBC's Reference YAML Utility Usage Guide
==============================================

At present, this documentation exists to describe the software in its current state to aid in the development process.  It will therefore usually lag one version behind the software itself, so some of the functions described herein may be incorrect/outdated.

Master YAML / New YAML Structure Overview
-----------------------------------------

In the broadest possible sense, this tool can accommodate either one or two YAMLs.  It always must be given a 'Master YAML' - that is to say, an existing list of references and their associated commands and metadata.  The Master YAML (hereafter simply 'Master') is, essentially, a manifest of all references on the entire system.  It can also be given a 'New YAML' (hereafter simply 'New') containing references.  Both of these files have the same formatting, but New corresponds to references that are being newly added to the system.  Providing both Master and New causes New to be appended to Master, ensuring the manifest remains comprehensive.

YAML Structure
--------------

Please see the following screenshot for an example YAML file, then refer to the description below the image for an explanation of its properties.

.. raw:: html

	<p>example.yaml</p>
    <img src="https://compbiocore.github.io/parseyaml/_static/parseyaml_yaml_example.png">

There are several important features of this file structure that should be noted.

Top-Level Subheadings
~~~~~~~~~~~~~~~~~~~~~

First is the 'configuration' subheading; this group of settings controls various options within the program.  Here, you can see three such options, with more to be added in the future.  The first is 'root-directory', which designates which folder the software will operate in.  The second is 'break-on-error', which causes the utility to break upon encountering an error rather than continuing onto other references.  The third is 'verbose', which controls the level of console output generated by the tool.

Second is the 'reference-entries' subheading, which will constitute the vast majority of the YAML.  This subheading includes all of the references documented within the YAML; its structure is highly repetitive, with the same child headings present in each reference's own 'reference-information-X' subheading.  We will describe the contents of one such 'reference-information-X' structure from the image - the most complicated one, 'reference-entry-1'.

**Per-Reference Subheadings**

Within 'reference-entry-1', there are several subheadings as well.  One of these, 'metadata', is required for all references.  The others, which can have any name and be as numerous as is needed, each describe one type of feature for a specified reference.  If that appears confusing at first glance, please continue reading.

The 'metadata' subheading includes important pieces of metadata that the user must record for a given reference.  'reference-name' is a field that is used to name the directory created by the software for that reference's files, while the rest are merely recorded.  At this time, three such pieces of metadata are supported: 'species', denoting the organism's species; 'organization', indicating which organization created the reference; and 'downloader', indicating which user ran the software on this reference.  In addition to being tabulated in the YAML, this metadata is written to a file and included with the reference files.