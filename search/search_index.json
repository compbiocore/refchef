{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RefChef - Genomic Reference Management Tool RefChef is a reference management system that includes additional tools to record the provenance of reference sequences, indices, and annotations. It was created to enable reproducible research. RefChef will: Document the exact steps undertaken in the retrieval and processing of genomic references Maintain the associated metadata Provide a mechanism for automatically reproducing retrieval and creation of an exact copy of genomic references","title":"Home"},{"location":"#refchef-genomic-reference-management-tool","text":"RefChef is a reference management system that includes additional tools to record the provenance of reference sequences, indices, and annotations. It was created to enable reproducible research. RefChef will: Document the exact steps undertaken in the retrieval and processing of genomic references Maintain the associated metadata Provide a mechanism for automatically reproducing retrieval and creation of an exact copy of genomic references","title":"RefChef - Genomic Reference Management Tool"},{"location":"folders/","text":"RefChef creates folders to store your references. The names of these folders is based on: The master.yaml key (which should match the 'name' entry under 'metadata' in master.yaml ). The 'component' entry under 'levels' in master.yaml . Here is the collapsed file tree that refchef created from the Tutorial part of the documentation and what the directory names are based on: ./Users/jwalla12/references #this directory is specified in refchef-cook or the config files \u2514\u2500\u2500 S_cerevisiae #this is named after the 'key' and the 'name' entry under 'metadata' in master.yaml \u251c\u2500\u2500 bowtie2_index #this folder is created in the master.yaml `commands` section. \u251c\u2500\u2500 bwa_index #this folder is created in the master.yaml `commands` section. \u251c\u2500\u2500 gtf #this folder is created in the master.yaml `commands` section. \u2514\u2500\u2500 primary #this is named after the 'component' entry under 'levels' in master.yaml Here is the expanded file tree: ./Users/jwalla12/references \u2514\u2500\u2500 S_cerevisiae \u251c\u2500\u2500 bowtie2_index \u2502 \u2514\u2500\u2500 metadata.txt \u251c\u2500\u2500 bwa_index \u2502 \u2514\u2500\u2500 metadata.txt \u251c\u2500\u2500 gtf \u2502 \u251c\u2500\u2500 CHECKSUMS \u2502 \u251c\u2500\u2500 Saccharomyces_cerevisiae.R64-1-1.87.gtf \u2502 \u251c\u2500\u2500 final_checksums.md5 \u2502 \u251c\u2500\u2500 metadata.txt \u2502 \u2514\u2500\u2500 postdownload-checksums.md5 \u2514\u2500\u2500 primary \u251c\u2500\u2500 CHECKSUMS \u251c\u2500\u2500 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa \u251c\u2500\u2500 bowtie2_index -> /Users/jwalla12/references/S_cerevisiae/bowtie2_index \u251c\u2500\u2500 bwa_index -> /Users/jwalla12/references/S_cerevisiae/bwa_index \u251c\u2500\u2500 final_checksums.md5 \u251c\u2500\u2500 metadata.txt \u2514\u2500\u2500 postdownload-checksums.md5 This indicates that refchef has created symlinked directories for bowtie2 and bwa indices in /Users/jwalla12/references/S_cerevisiae/primary . This process (linking reference and index) is triggered by: 1. The addition of the src: line in bowtie2.yaml and bwa.yaml 2. Specifying the master.yaml levels are indices: in the master.yaml If we look at the output from refchef-menu , we see the UUID for the primary reference file, which is dff337a6-9a1d-3313-8ced-dc6f3bfc9689 . \u250c \ud83d\udc36 RefChef Menu \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 name \u2502 organism \u2502 component \u2502 description \u2502 uuid \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 primary \u2502 corresponds to ganbank id GCA_000146045.2 \u2502 dff337a6-9a1d-3313-8ced-dc6f3bfc9689 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In this clipping from bowtie2.yaml, note that the UUID was indicated in the src: entry under component , indices , and levels . S_cerevisiae : levels : indices : - component : bowtie2_index complete : status : false src : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 This indicates which primary reference was used to create the index file.","title":"Folders"},{"location":"inputs/","text":"master.yaml overview Refchef uses YAML files that are composed of nested entry and value pairs -- for example, the entry and value pair common_name : yeast . The spacing and indentation of the entries and values are meaningful - Refchef uses the convention of using 2 spaces to indent each subsequent level of the entries and values in the YAML and a : and space are between each entry and value. Some entries in the yaml will have a preceeding - and a space before them (such as - component: and the commands under the commands header), which are required for Refchef to properly process the YAML. See the master.yaml file specifications for more information. Example master.yaml before processing: S_cerevisiae : metadata : name : S_cerevisiae common_name : yeast ncbi_taxon_id : 4932 organism : Saccharomyces cerevisiae organization : ensembl custom : no description : corresponds to genbank id GCA_000146045.2 downloader : joselynn wallace ensembl_release_number : 87 accession : genbank : refseq : levels : references : - component : primary complete : status : false commands : - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 The string of text entered in the key field ( S_cerevisiae in the above example) will be used to create a folder inside the directory you specify as your output in your config file ( cfg.ini or cfg.yaml ) or refchef-cook arguments. In the previous quickstart example, we used /Users/jwalla12/references as the output directory for refchef-cook . Here is the collapsed file tree that refchef created, note that the folder containing the primary reference is nested inside a folder named S_cerevisiae based on the key . ./Users/jwalla12/references #this directory is specified in refchef-cook or the config files \u2514\u2500\u2500 S_cerevisiae \u251c\u2500\u2500 bowtie2_index \u251c\u2500\u2500 bwa_index \u251c\u2500\u2500 gtf \u2514\u2500\u2500 primary master.yaml metadata The metadata section of master.yaml contains information about the references, including the organism name, taxon_id, etc. Caution When running a new YAML file to add additional information to a primary reference, metadata entries present in the initial master.yaml file can be omitted (for example, ncbi_taxon_id: , common_name: ). When adding indices or annotations to a primary reference already in master.yaml , the metadata in master.yaml will be overwritten by the metadata in the new.yaml file. This could be helpful in situations where you want to update the metadata fields. master.yaml levels The levels section contains higher level information about the references, including when they were downloaded and the exact commands used to download and process the references. Caution The entry status must be set to false for Refchef to exeecute the commands in the code block. If it is set to true , the code will not execute (even if the -e flag is set). After a code block is executed, the false flag will flip to true automatically and the time: entry will appear under the status header. The time: header will be populated with the datetime stamp the reference was downloaded. master.yaml commands This portion of the master.yaml should be populated with the specific commands you want to execute to download and process your reference. Each command should be prepended with a - and a space. Caution Each time files are processed using a set of commands in the YAML, the last command must run md5 on all of the files and direct the output to a file called final_checksums.md5 . cfg.yaml overview Refchef requires configuration information, which can be passed as arguments or specified in a configuration file. A cfg.yaml is one option for configuration and should contain the following fields. Also indicated below: If filling out the field is required, their expected format, and a brief description of their contents. See the cfg.yaml file specifications for more information. example: config-yaml : path-settings : reference-directory : /Users/jwalla12/references git-directory : /Users/jwalla12/remote_references remote-repository : jrwallace/remote_references log-settings : log : 'yes' cfg.ini overview Refchef requires configuration information, which can be passed as arguments or specified in a configuration file. A cfg.ini is one option for configuration and should contain the following fields. Also indicated below: If filling out the field is required, their expected format, and a brief description of their contents. See the cfg.ini file specifications for more information. example: [path-settings] reference-directory = / Users / jwalla12 / references git-directory = / Users / jwalla12 / remote_references remote-repository = jrwallace / remote_references [log-settings] log = yes [runtime-settings] break-on-error = yes verbose = yes","title":"Inputs"},{"location":"inputs/#masteryaml","text":"overview Refchef uses YAML files that are composed of nested entry and value pairs -- for example, the entry and value pair common_name : yeast . The spacing and indentation of the entries and values are meaningful - Refchef uses the convention of using 2 spaces to indent each subsequent level of the entries and values in the YAML and a : and space are between each entry and value. Some entries in the yaml will have a preceeding - and a space before them (such as - component: and the commands under the commands header), which are required for Refchef to properly process the YAML. See the master.yaml file specifications for more information. Example master.yaml before processing: S_cerevisiae : metadata : name : S_cerevisiae common_name : yeast ncbi_taxon_id : 4932 organism : Saccharomyces cerevisiae organization : ensembl custom : no description : corresponds to genbank id GCA_000146045.2 downloader : joselynn wallace ensembl_release_number : 87 accession : genbank : refseq : levels : references : - component : primary complete : status : false commands : - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 The string of text entered in the key field ( S_cerevisiae in the above example) will be used to create a folder inside the directory you specify as your output in your config file ( cfg.ini or cfg.yaml ) or refchef-cook arguments. In the previous quickstart example, we used /Users/jwalla12/references as the output directory for refchef-cook . Here is the collapsed file tree that refchef created, note that the folder containing the primary reference is nested inside a folder named S_cerevisiae based on the key . ./Users/jwalla12/references #this directory is specified in refchef-cook or the config files \u2514\u2500\u2500 S_cerevisiae \u251c\u2500\u2500 bowtie2_index \u251c\u2500\u2500 bwa_index \u251c\u2500\u2500 gtf \u2514\u2500\u2500 primary master.yaml metadata The metadata section of master.yaml contains information about the references, including the organism name, taxon_id, etc. Caution When running a new YAML file to add additional information to a primary reference, metadata entries present in the initial master.yaml file can be omitted (for example, ncbi_taxon_id: , common_name: ). When adding indices or annotations to a primary reference already in master.yaml , the metadata in master.yaml will be overwritten by the metadata in the new.yaml file. This could be helpful in situations where you want to update the metadata fields. master.yaml levels The levels section contains higher level information about the references, including when they were downloaded and the exact commands used to download and process the references. Caution The entry status must be set to false for Refchef to exeecute the commands in the code block. If it is set to true , the code will not execute (even if the -e flag is set). After a code block is executed, the false flag will flip to true automatically and the time: entry will appear under the status header. The time: header will be populated with the datetime stamp the reference was downloaded. master.yaml commands This portion of the master.yaml should be populated with the specific commands you want to execute to download and process your reference. Each command should be prepended with a - and a space. Caution Each time files are processed using a set of commands in the YAML, the last command must run md5 on all of the files and direct the output to a file called final_checksums.md5 .","title":"master.yaml "},{"location":"inputs/#cfgyaml","text":"overview Refchef requires configuration information, which can be passed as arguments or specified in a configuration file. A cfg.yaml is one option for configuration and should contain the following fields. Also indicated below: If filling out the field is required, their expected format, and a brief description of their contents. See the cfg.yaml file specifications for more information. example: config-yaml : path-settings : reference-directory : /Users/jwalla12/references git-directory : /Users/jwalla12/remote_references remote-repository : jrwallace/remote_references log-settings : log : 'yes'","title":"cfg.yaml "},{"location":"inputs/#cfgini","text":"overview Refchef requires configuration information, which can be passed as arguments or specified in a configuration file. A cfg.ini is one option for configuration and should contain the following fields. Also indicated below: If filling out the field is required, their expected format, and a brief description of their contents. See the cfg.ini file specifications for more information. example: [path-settings] reference-directory = / Users / jwalla12 / references git-directory = / Users / jwalla12 / remote_references remote-repository = jrwallace / remote_references [log-settings] log = yes [runtime-settings] break-on-error = yes verbose = yes","title":"cfg.ini "},{"location":"installation/","text":"Install RefChef To install from PyPI using pip : pip install refchef Set up Git and GitHub RefChef uses Git repositories for version control of the master.yaml file, which contains a list of all the references on the system and their provenance. You can also use GitHub to remotely host your repositories, but this is optional. Before using RefChef, set up git . If you want to use GitHub to host your repositories, create a GitHub account and set up an access token . Additionally, create a .gitignore file ... touch .gitignore ...and add .env to the .gitignore by pasting the following into the .gitignore file. # ignore env files *.env Now create a .env file... touch .env ... and paste the contents of the .env.template file in the RefChef home directory into the .env file, which will now look like this: GITHUB_TOKEN = Then, paste the GitHub access token into the GITHUB_TOKEN= line copied over from the env.template file. For example, your .env file might now look like this: GITHUB_TOKEN = 5c25370fcf7db4a676d98d72700e2922654485ed Development To install a development version from the current directory: git clone https://github.com/compbiocore/refchef.git cd refchef pip install -e . Run unit tests as: python setup.py test Contributing Contributions consistent with the style and quality of existing code are welcome. Be sure to follow the guidelines below. Check the issues page of this repository for available work. Committing This project uses commitizen to ensure that commit messages remain well-formatted and consistent across different contributors. Before committing for the first time, install commitizen and read Conventional Commits . pip install commitizen To start work on a new change, pull the latest develop and create a new topic branch (e.g. feature-resume-model , chore-test-update , bugfix-bad-bug ). Add your changes to the current branch. git add . To commit your changes, run the following command (instead of git commit ) and follow the directions: cz commit Contact email: cbc-help@brown.edu","title":"Installation"},{"location":"installation/#install-refchef","text":"To install from PyPI using pip : pip install refchef","title":"Install RefChef"},{"location":"installation/#set-up-git-and-github","text":"RefChef uses Git repositories for version control of the master.yaml file, which contains a list of all the references on the system and their provenance. You can also use GitHub to remotely host your repositories, but this is optional. Before using RefChef, set up git . If you want to use GitHub to host your repositories, create a GitHub account and set up an access token . Additionally, create a .gitignore file ... touch .gitignore ...and add .env to the .gitignore by pasting the following into the .gitignore file. # ignore env files *.env Now create a .env file... touch .env ... and paste the contents of the .env.template file in the RefChef home directory into the .env file, which will now look like this: GITHUB_TOKEN = Then, paste the GitHub access token into the GITHUB_TOKEN= line copied over from the env.template file. For example, your .env file might now look like this: GITHUB_TOKEN = 5c25370fcf7db4a676d98d72700e2922654485ed","title":"Set up Git and GitHub"},{"location":"installation/#development","text":"To install a development version from the current directory: git clone https://github.com/compbiocore/refchef.git cd refchef pip install -e . Run unit tests as: python setup.py test","title":"Development"},{"location":"installation/#contributing","text":"Contributions consistent with the style and quality of existing code are welcome. Be sure to follow the guidelines below. Check the issues page of this repository for available work.","title":"Contributing"},{"location":"installation/#committing","text":"This project uses commitizen to ensure that commit messages remain well-formatted and consistent across different contributors. Before committing for the first time, install commitizen and read Conventional Commits . pip install commitizen To start work on a new change, pull the latest develop and create a new topic branch (e.g. feature-resume-model , chore-test-update , bugfix-bad-bug ). Add your changes to the current branch. git add . To commit your changes, run the following command (instead of git commit ) and follow the directions: cz commit","title":"Committing"},{"location":"installation/#contact","text":"email: cbc-help@brown.edu","title":"Contact"},{"location":"overview/","text":"RefChef comes with two commands: refchef-cook : Will read recipes and execute the commands that will retrieve the references, indices, or annotations based on the contents of master.yaml . refchef-menu : Provides a way for the user to list all references present in the system, based on master.yaml , as well as filter the list of references based on metadata options. RefChef requires a master.yaml file: In addition to the refchef-cook and refchef-menu commands, RefChef requires a master.yaml containing a list of references, indices, annotations, and metadata, as well as the commands necessary to download and process the files. When refchef-cook is executed, RefChef will append the master.yaml to change the complete option from false to true and will also add a uuid for each reference, the date the files were downloaded and their location, as well as a complete list of files downloaded. Based on the arguments you pass to refchef-cook , it will either commit those changes to master.yaml to a local repository or commit and push the changes to a remote repository. RefChef requires configuration information: refchef-cook and refchef-menu both require some configuration information, including: Where you'd like the references to be saved The local git repository for version control of references The remote github repository for version control of reference sequences (optional). This information can be specified in a cfg.yaml file, a cfg.ini file, or it can be passed as arguments to refchef-cook .","title":"Overview"},{"location":"quickstart/","text":"This quickstart assumes that bwa and bowtie2 are installed and in your current path. Create a remote repository and clone it . Create a directory for refchef to save your references. Create a master.yaml file and save it in your local git repository directory. Here is a master.yaml file that will download a yeast genome from Ensembl: S_cerevisiae : metadata : name : S_cerevisiae common_name : yeast ncbi_taxon_id : 4932 organism : Saccharomyces cerevisiae organization : ensembl custom : no description : corresponds to genbank id GCA_000146045.2 downloader : joselynn wallace ensembl_release_number : 87 accession : genbank : refseq : levels : references : - component : primary complete : status : false commands : - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 Pass the configuration arguments in a config file or directly to refchef-cook (as seen in the following example): refchef - cook - e - o / Users / jwalla12 / references - gl / Users / jwalla12 / remote_references - gr jrwallace / remote_references --git commit -l After refchef-cook is run, master.yaml will reflect that you have downloaded the reference and it will now look like this: S_cerevisiae : metadata : name : S_cerevisiae common_name : yeast ncbi_taxon_id : 4932 organism : Saccharomyces cerevisiae organization : ensembl custom : false description : corresponds to genbank id GCA_000146045.2 downloader : joselynn wallace ensembl_release_number : 87 accession : genbank : null refseq : null levels : references : - component : primary complete : status : true time : '2019-07-25 09:08:37.478553' commands : - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 location : /Users/jwalla12/references/S_cerevisiae/primary files : - metadata.txt - postdownload-checksums.md5 - CHECKSUMS - final_checksums.md5 - Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa uuid : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 Make another .yaml file to create a bowtie2 index of this genome, call the file bowtie2.yaml . S_cerevisiae : levels : indices : - component : bowtie2_index complete : status : false src : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 commands : - mkdir /Users/jwalla12/references/S_cerevisiae/bowtie2_index - cd /Users/jwalla12/references/S_cerevisiae/bowtie2_index - ln -s /Users/jwalla12/references/S_cerevisiae/primary/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa ./Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa - bowtie2-build Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa S_cerevisiae - md5 ./*.* > ./final_checksums.md5 Then use refchef-cook and specify the new yaml to add to master.yaml . refchef - cook - e - o / Users / jwalla12 / references - gl / Users / jwalla12 / remote_references - gr jrwallace / remote_references - n / Users / jwalla12 / remote_references / bowtie2 . yaml - g commit - l Make another .yaml file to create a bwa index of this genome, call the file bwa.yaml . S_cerevisiae : levels : indices : - component : bwa_index complete : status : false src : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 commands : - mkdir /Users/jwalla12/references/S_cerevisiae/bwa_index - cd /Users/jwalla12/references/S_cerevisiae/bwa_index - ln -s /Users/jwalla12/references/S_cerevisiae/primary/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa ./Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa - bwa index Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa -p S_cerevisiae - md5 ./*.* > ./final_checksums.md5 Then use refchef-cook and specify the new yaml to add to master.yaml . refchef - cook - e - o / Users / jwalla12 / references - gl / Users / jwalla12 / remote_references - gr jrwallace / remote_references - n / Users / jwalla12 / remote_references / bwa . yaml - g commit - l We can also track annotation files for the reference genome. Make the following .yaml file and call it gtf.yaml : S_cerevisiae : levels : annotations : - component : gtf complete : status : false commands : - wget ftp://ftp.ensembl.org/pub/release-87/gtf/saccharomyces_cerevisiae/Saccharomyces_cerevisiae.R64-1-1.87.gtf.gz - wget ftp://ftp.ensembl.org/pub/release-87/gtf/saccharomyces_cerevisiae/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 Then use refchef-cook and specify the new yaml to add to master.yaml . refchef - cook - e - o / Users / jwalla12 / references - gl / Users / jwalla12 / remote_references - gr jrwallace / remote_references - n / Users / jwalla12 / remote_references / gtf . yaml - g commit - l We can see what references are available using refchef-menu : refchef - menu - f / Users / jwalla12 / remote_references / master . yaml \u250c \ud83d\udc36 RefChef Menu \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 name \u2502 organism \u2502 component \u2502 description \u2502 uuid \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 gtf \u2502 corresponds to genbank id GCA_000146045 . 2 \u2502 5 f7ae94c - 2 e51 - 3 cc6 - bcbf - 6 e251c75ef2f \u2502 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 bowtie2_index \u2502 corresponds to genbank id GCA_000146045 . 2 \u2502 93393699 - cb40 - 3 ad7 - ac07 - ae4bdb1efd3e \u2502 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 bwa_index \u2502 corresponds to genbank id GCA_000146045 . 2 \u2502 dff337a6 - 9 a1d - 3313 - 8 ced - dc6f3bfc9689 \u2502 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 primary \u2502 corresponds to genbank id GCA_000146045 . 2 \u2502 dff337a6 - 9 a1d - 3313 - 8 ced - dc6f3bfc9689 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 We can also get this information if we look at master.yaml : S_cerevisiae : metadata : name : S_cerevisiae common_name : yeast ncbi_taxon_id : 4932 organism : Saccharomyces cerevisiae organization : ensembl custom : false description : corresponds to genbank id GCA_000146045.2 downloader : joselynn wallace ensembl_release_number : 87 accession : genbank : null refseq : null levels : references : - component : primary complete : status : true time : '2019-07-25 16:26:42.700668' commands : - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz - wget ftp://ftp.ensembl.org/pub/release-87/fasta/saccharomyces_cerevisiae/dna/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 location : /Users/jwalla12/references/S_cerevisiae/primary files : - metadata.txt - postdownload-checksums.md5 - CHECKSUMS - final_checksums.md5 - Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa uuid : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 indices : - component : bowtie2_index complete : status : true time : '2019-07-25 16:26:43.971349' src : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 commands : - mkdir /Users/jwalla12/references/yeast_refs/bowtie2_index - cd /Users/jwalla12/references/yeast_refs/bowtie2_index - ln -s /Users/jwalla12/references/yeast_refs/primary/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa /Users/jwalla12/references/yeast_refs/bowtie2_index/ - bowtie2-build /Users/jwalla12/references/yeast_refs/bowtie2_index/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa S_cerevisiae - md5 /Users/jwalla12/references/yeast_refs/bowtie2_index/*.* > /Users/jwalla12/references/yeast_refs/bowtie2_index/final_checksums.md5 location : /Users/jwalla12/references/S_cerevisiae/bowtie2_index files : - metadata.txt uuid : 84928c3e-af1a-11e9-a45e-8c8590bd206d - component : bwa_index complete : status : true time : '2019-07-25 16:26:45.183284' src : dff337a6-9a1d-3313-8ced-dc6f3bfc9689 commands : - mkdir /Users/jwalla12/references/yeast_refs/bwa_index - cd /Users/jwalla12/references/yeast_refs/bwa_index - ln -s /Users/jwalla12/references/yeast_refs/primary/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa /Users/jwalla12/references/yeast_refs/bwa_index/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa - bwa index /Users/jwalla12/references/yeast_refs/bwa_index/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa > /Users/jwalla12/references/yeast_refs/bwa_index/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa - md5 /Users/jwalla12/references/yeast_refs/bwa_index/*.* > /Users/jwalla12/references/yeast_refs/bwa_index/final_checksums.md5 location : /Users/jwalla12/references/S_cerevisiae/bwa_index files : - metadata.txt uuid : 854b7780-af1a-11e9-a9f8-8c8590bd206d annotations : - component : gtf complete : status : true time : '2019-07-25 16:26:54.326082' commands : - wget ftp://ftp.ensembl.org/pub/release-87/gtf/saccharomyces_cerevisiae/Saccharomyces_cerevisiae.R64-1-1.87.gtf.gz - wget ftp://ftp.ensembl.org/pub/release-87/gtf/saccharomyces_cerevisiae/CHECKSUMS - md5 *.gz > postdownload-checksums.md5 - gunzip *.gz - md5 *.* > final_checksums.md5 location : /Users/jwalla12/references/S_cerevisiae/gtf files : - metadata.txt - postdownload-checksums.md5 - Saccharomyces_cerevisiae.R64-1-1.87.gtf - CHECKSUMS - final_checksums.md5 uuid : 5f7ae94c-2e51-3cc6-bcbf-6e251c75ef2f","title":"Quickstart"},{"location":"serve/","text":"RefChef comes with the refchef-serve script. RefChef Serve uses Flask to create a minimal web interface with a list of references downloaded to the local system. It takes the argument --master (-m) or --config -c to find the local master.yaml file. RefChef serve will render a web interface with a filterable table containing all references, indices, and annotations. Currently, the table shows only the following fields: reference name, species, organization, component, location of files, files, and UUID. To render the application: refchef-serve -m path/to/master.yaml or refchef-serve -c path/to/cfg.yaml This will create and run the application that can be accessed at http://127.0.0.1:5000 . Here's an example:","title":"RefChef serve"},{"location":"specs/","text":"master.yaml The master.yaml file is the main source of information that RefChef uses to retrieve references, indices, and annotations. It is composed of sequences of code blocks that correspond to each reference. Each code block in master.yaml starts with a key , followed by metadata and levels . See the master.yaml overview and usage for more information. The key section consists of: <reference_name>: Expected format: String where <reference_name> is the name of the reference. The metadata section consists of: metadata.name Expected format: <reference_name> string, should be the same as the block's key metadata.common_name Expected format: string metadata.ncbi_taxon_id Expected format: integer, based on NCBI taxon ID metadata.organism Expected format: string metadata.organization Expected format: string metadata.custom Expected format: string metadata.description Expected format: string metadata.downloader Expected format: string metadata.ensembl_release_number Expected format: integer metadata.accession.genbank Expected format: string metadata.accession.refseq Expected format: string The levels section consists of: levels.<type> Where <type>: references , annotations , or indices levels.<type>.- component Expected format: string levels.<type>.complete.status Expected format: boolean (note that if complete.status is set to true RefChef will skip the current block and not retrieve any file. RefChef automatically changes the status to true after retrieving files for the first time.) levels.<type>.src Expected format: UUID string from existing reference, when adding an index file for a reference RefChef will create a symlink to the index files in the reference folder. levels.<type>.commands Expected format: Each command should start with - , this section is a list of commands to download and process each reference. After refchef-cook is run and references are downloaded, levels.<type>.complete.status: false will change to levels.<type>.complete.status: true and the following fields will be added to master.yaml levels.<type>.complete.time Expected format: RefChef will autopopulate this field with the date and time stamp the reference was downloaded if levels.<type>.complete.status: true levels.<type>.location Expected format: Refchef will autopopulate this field with the directory where downloaded files are stored if levels.<type>.complete.status: true levels.<type>.files Expected format: Refchef will autopopulate this field with a list of files that were downloaded if levels.<type>.complete.status: true levels.<type>.uuid Expected format: Refchef will autopopulate this field with a UUID for your reference file if levels.<type>.complete.status: true cfg.yaml If using a cfg.yaml file, the cfg.yaml file should follow the following specs: config-yaml.path-settings.reference-directory Expected format: String, path to reference storage directory config-yaml.path-settings.git-directory Expected format: String, path to local git repository config-yaml.path-settings.remote-repository Expected format: String, remote git repository, should be in the format of user/repo config-yaml.log-settings.log Expected format: String, should be either 'yes' or 'no' in single quotes, indicating whether or not log files will be made Also see the cfg.yaml overview and example. cfg.ini If using a cfg.ini file, the cfg.ini file should follow the following specs: [path-settings].reference-directory= Expected format: String, path to reference storage directory [path-settings].git-directory= Expected format: String, path to local git repository [path-settings].remote-repository= Expected format: String, remote git repository, should be in the format of user/repo [log-settings].log= Expected format: String, should be either 'yes' or 'no', indicating whether or not log files will be made [runtime-settings].break-on-error= Expected format: String, should be either 'yes' or 'no', indicating how RefChef should respond when encountering an error [runtime-settings].verbose= Expected format: String, should be either 'yes' or 'no', toggles between verbosity output settings Also see the cfg.ini overview and example.","title":"File specifications"},{"location":"specs/#masteryaml","text":"The master.yaml file is the main source of information that RefChef uses to retrieve references, indices, and annotations. It is composed of sequences of code blocks that correspond to each reference. Each code block in master.yaml starts with a key , followed by metadata and levels . See the master.yaml overview and usage for more information. The key section consists of: <reference_name>: Expected format: String where <reference_name> is the name of the reference. The metadata section consists of: metadata.name Expected format: <reference_name> string, should be the same as the block's key metadata.common_name Expected format: string metadata.ncbi_taxon_id Expected format: integer, based on NCBI taxon ID metadata.organism Expected format: string metadata.organization Expected format: string metadata.custom Expected format: string metadata.description Expected format: string metadata.downloader Expected format: string metadata.ensembl_release_number Expected format: integer metadata.accession.genbank Expected format: string metadata.accession.refseq Expected format: string The levels section consists of: levels.<type> Where <type>: references , annotations , or indices levels.<type>.- component Expected format: string levels.<type>.complete.status Expected format: boolean (note that if complete.status is set to true RefChef will skip the current block and not retrieve any file. RefChef automatically changes the status to true after retrieving files for the first time.) levels.<type>.src Expected format: UUID string from existing reference, when adding an index file for a reference RefChef will create a symlink to the index files in the reference folder. levels.<type>.commands Expected format: Each command should start with - , this section is a list of commands to download and process each reference. After refchef-cook is run and references are downloaded, levels.<type>.complete.status: false will change to levels.<type>.complete.status: true and the following fields will be added to master.yaml levels.<type>.complete.time Expected format: RefChef will autopopulate this field with the date and time stamp the reference was downloaded if levels.<type>.complete.status: true levels.<type>.location Expected format: Refchef will autopopulate this field with the directory where downloaded files are stored if levels.<type>.complete.status: true levels.<type>.files Expected format: Refchef will autopopulate this field with a list of files that were downloaded if levels.<type>.complete.status: true levels.<type>.uuid Expected format: Refchef will autopopulate this field with a UUID for your reference file if levels.<type>.complete.status: true","title":"master.yaml "},{"location":"specs/#cfgyaml","text":"If using a cfg.yaml file, the cfg.yaml file should follow the following specs: config-yaml.path-settings.reference-directory Expected format: String, path to reference storage directory config-yaml.path-settings.git-directory Expected format: String, path to local git repository config-yaml.path-settings.remote-repository Expected format: String, remote git repository, should be in the format of user/repo config-yaml.log-settings.log Expected format: String, should be either 'yes' or 'no' in single quotes, indicating whether or not log files will be made Also see the cfg.yaml overview and example.","title":"cfg.yaml "},{"location":"specs/#cfgini","text":"If using a cfg.ini file, the cfg.ini file should follow the following specs: [path-settings].reference-directory= Expected format: String, path to reference storage directory [path-settings].git-directory= Expected format: String, path to local git repository [path-settings].remote-repository= Expected format: String, remote git repository, should be in the format of user/repo [log-settings].log= Expected format: String, should be either 'yes' or 'no', indicating whether or not log files will be made [runtime-settings].break-on-error= Expected format: String, should be either 'yes' or 'no', indicating how RefChef should respond when encountering an error [runtime-settings].verbose= Expected format: String, should be either 'yes' or 'no', toggles between verbosity output settings Also see the cfg.ini overview and example.","title":"cfg.ini "},{"location":"usage/","text":"refchef-cook refchef-cook reads master.yaml and executes the commands that will retrieve and/or process the references, indices, or annotations. usage: refchef-cook [ *arguments* ] arguments: --help, -h Show this help message and exit. --execute, -e Executes the YAML file ( master or new if specified ) . --append, -a Will append commands to the master YAML. --new, -n Full path to the new YAML. --git, -g Git commands to use, choose from ` commit ` or ` push ` . --outdir, -o Output folder where references will be stored. --git_local, -gl Required, git folder where the ` master.yaml ` is stored. --git_remote, -gr Remote git repository ( in the format ` user/project_name ` ) . --config, -c Path to config file ( .yaml or .ini format ) . --logs, -l Whether to save the log files. examples: 1. This will read in new.yaml file, append to master.yaml and commit the changes using git: refchef-cook --config /path/to/cfg.yaml --execute --new new.yaml --git commit . 2. This will process master.yaml , commit and push changes to the remote repository: refchef-cook --execute -o /path/to/output/dir --git_local /path/to/git/dir --git_remote user/project_name --git push . refchef-menu Refchef-menu provides a way for the user to list all references present in the system, based on master.yaml , as well as filter the list of references based on metadata options. You must specify either --master, -m or --config, -c . usage: refchef-menu [ *arguments* ] arguments: --help, -h Show this help message and exit. --filter Field:value pair for filtering menu. --master, -f Path to ` master.yaml ` file, needed if ` -c ` argument unused. --config, -c Path to config file in .yaml or .ini format. --full Will show full table ( including files and their locations ) . --meta, -m Return metadata for a specific reference. example: 1 - This will look at all primary genome references available in the current system: refchef-menu -f /Users/jwalla12/remote_references/master.yaml --filter component:primary \u250c \ud83d\udc36 RefChef Menu \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 name \u2502 organism \u2502 component \u2502 description \u2502 uuid \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 primary \u2502 corresponds to ganbank id GCA_000146045.2 \u2502 dff337a6-9a1d-3313-8ced-dc6f3bfc9689 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Usage"},{"location":"usage/#refchef-cook","text":"refchef-cook reads master.yaml and executes the commands that will retrieve and/or process the references, indices, or annotations. usage: refchef-cook [ *arguments* ] arguments: --help, -h Show this help message and exit. --execute, -e Executes the YAML file ( master or new if specified ) . --append, -a Will append commands to the master YAML. --new, -n Full path to the new YAML. --git, -g Git commands to use, choose from ` commit ` or ` push ` . --outdir, -o Output folder where references will be stored. --git_local, -gl Required, git folder where the ` master.yaml ` is stored. --git_remote, -gr Remote git repository ( in the format ` user/project_name ` ) . --config, -c Path to config file ( .yaml or .ini format ) . --logs, -l Whether to save the log files. examples: 1. This will read in new.yaml file, append to master.yaml and commit the changes using git: refchef-cook --config /path/to/cfg.yaml --execute --new new.yaml --git commit . 2. This will process master.yaml , commit and push changes to the remote repository: refchef-cook --execute -o /path/to/output/dir --git_local /path/to/git/dir --git_remote user/project_name --git push .","title":"refchef-cook "},{"location":"usage/#refchef-menu","text":"Refchef-menu provides a way for the user to list all references present in the system, based on master.yaml , as well as filter the list of references based on metadata options. You must specify either --master, -m or --config, -c . usage: refchef-menu [ *arguments* ] arguments: --help, -h Show this help message and exit. --filter Field:value pair for filtering menu. --master, -f Path to ` master.yaml ` file, needed if ` -c ` argument unused. --config, -c Path to config file in .yaml or .ini format. --full Will show full table ( including files and their locations ) . --meta, -m Return metadata for a specific reference. example: 1 - This will look at all primary genome references available in the current system: refchef-menu -f /Users/jwalla12/remote_references/master.yaml --filter component:primary \u250c \ud83d\udc36 RefChef Menu \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 name \u2502 organism \u2502 component \u2502 description \u2502 uuid \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 S_cerevisiae \u2502 Saccharomyces cerevisiae \u2502 primary \u2502 corresponds to ganbank id GCA_000146045.2 \u2502 dff337a6-9a1d-3313-8ced-dc6f3bfc9689 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"refchef-menu "},{"location":"usecases/","text":"Download reference, local repository master.yaml version control: Download reference, remote repository master.yaml version control: Download new reference, local repository master.yaml version control: Add manually downloaded reference, append commands to master.yaml, do not execute commands, local repository master.yaml version control: refchef-menu to view references available on the system:","title":"Refchef use cases"},{"location":"usecases/#download-reference-local-repository-masteryaml-version-control","text":"","title":"Download reference, local repository master.yaml version control:"},{"location":"usecases/#download-reference-remote-repository-masteryaml-version-control","text":"","title":"Download reference, remote repository master.yaml version control:"},{"location":"usecases/#download-new-reference-local-repository-masteryaml-version-control","text":"","title":"Download new reference, local repository master.yaml version control:"},{"location":"usecases/#add-manually-downloaded-reference-append-commands-to-masteryaml-do-not-execute-commands-local-repository-masteryaml-version-control","text":"","title":"Add manually downloaded reference, append commands to master.yaml, do not execute commands, local repository master.yaml version control:"},{"location":"usecases/#refchef-menu-to-view-references-available-on-the-system","text":"","title":"refchef-menu to view references available on the system:"}]}